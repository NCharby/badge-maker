version: '3.8'

services:
  badge-maker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: badge-maker-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Supabase Configuration
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # Application Configuration
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_APP_NAME=${NEXT_PUBLIC_APP_NAME}
      
      # File Upload Configuration
      - NEXT_PUBLIC_MAX_FILE_SIZE=${NEXT_PUBLIC_MAX_FILE_SIZE:-5242880}
      - NEXT_PUBLIC_ALLOWED_FILE_TYPES=${NEXT_PUBLIC_ALLOWED_FILE_TYPES:-image/jpeg,image/png,image/webp}
      
      # Storage Configuration
      - NEXT_PUBLIC_STORAGE_BUCKET_BADGE_IMAGES=${NEXT_PUBLIC_STORAGE_BUCKET_BADGE_IMAGES:-badge-images}
      - NEXT_PUBLIC_STORAGE_BUCKET_WAIVER_DOCUMENTS=${NEXT_PUBLIC_STORAGE_BUCKET_WAIVER_DOCUMENTS:-waiver-documents}
      
      # Waiver Configuration
      - WAIVER_VERSION=${WAIVER_VERSION:-1.0.0}
      - PDF_ACCESS_EXPIRY_HOURS=${PDF_ACCESS_EXPIRY_HOURS:-24}
      
      # Email Service (Postmark)
      - POSTMARK_API_KEY=${POSTMARK_API_KEY}
      - POSTMARK_FROM_EMAIL=${POSTMARK_FROM_EMAIL}
      - POSTMARK_TEMPLATE_ID=${POSTMARK_TEMPLATE_ID}
      
      # Telegram Bot (Optional)
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_INVITE_EXPIRY_HOURS=${TELEGRAM_INVITE_EXPIRY_HOURS:-24}
      
      # Production Settings
      - NODE_ENV=production
      - NEXT_PUBLIC_DEBUG=${NEXT_PUBLIC_DEBUG:-false}
      
      # Puppeteer Configuration
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    volumes:
      # Persistent storage for logs
      - ./logs:/app/logs
      # Temporary storage for PDF generation
      - /tmp:/tmp
    networks:
      - badge-maker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: badge-maker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - badge-maker
    networks:
      - badge-maker-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Watchtower for automatic updates (optional)
  watchtower:
    image: containrrr/watchtower
    container_name: badge-maker-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    networks:
      - badge-maker-network
    profiles:
      - auto-update

networks:
  badge-maker-network:
    driver: bridge

volumes:
  logs:
    driver: local
